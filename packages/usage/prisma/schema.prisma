// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
  output   = "./zod" // default is ./generated/zod
  // useInstanceOfForDecimal = true // default is false
  // createInputTypes        = false // default is true
  // addInputTypeValidation  = false // default is true
  imports  = "import(import { myFunction } from '../../utils/myFunction';).import(import validator from 'validator';)" // optional
  // tsConfigFilePath = "tsconfig.json" // optional
  // prismaClientPath = "../../node_modules/.prisma/client" // optional
}

enum MYValue {
  A
  B
  C
}

enum Role {
  USER
  ADMIN
}

enum SecondEnum {
  ONE
  TWO
}

enum AnotherEnum {
  ONE
  TWO
}

/// comment line one
/// comment line two
model MyModel {
  id           Int     @id @default(autoincrement())
  // custom String? /// @zod.custom.use(z.string().refine(val => validator.isBIC(val)).transform(val => val.toUpperCase()))
  /// comment before validator @zod.string.min(4).max(10) 
  /// comment after validator
  string       String?
  omitField    String? /// @zod.custom.omit([model, input])
  omitRequired String /// @zod.custom.omit([model, input])
}

model MODELWithUpperCase {
  id   Int  @id @default(autoincrement())
  STRING String
  MYValue MYValue
}

model JsonModel {
  id   Int  @id @default(autoincrement())
  json Json
}

model Test {
  /// @zod.string({ invalid_type_error: "some error with special chars: some + -*#'substring[]*#!ยง$%&/{}[]", required_error: "some other", description: "some description" }).cuid()
  id         String    @id @default(cuid())
  /// some comment @zod.string({ required_error: "error", invalid_type_error: "error"})
  name       String?
  value      MYValue
  /// @zod.custom.use(z.string().refine((val) => validator.isBIC(val), { message: 'BIC is not valid' }))
  bic        String?
  intTwo     Int
  int        Int?
  floatOpt   Float?
  float      Float
  decimal    Decimal
  decimalOpt Decimal?
  date       DateTime  @default(now())
  dateOpt    DateTime? /// @zod.date({ invalid_type_error: "wrong date type" })
  bigInt     BigInt /// @zod.bigint({ invalid_type_error: "error" })
  bigIntOpt  BigInt?
  json       Json
  // jsonOpt    Json?
  bytes      Bytes /// @zod.custom.use(z.instanceof(Buffer).refine((val) => val ? true : false, { message: 'Value is not valid' }))
  bytesOpt   Bytes?
}

model MyPrismaScalarsType {
  /// @zod.string({ invalid_type_error: "invalid type error" }).cuid()
  id      String    @id @default(cuid())
  /// Some comment about string @zod.string.min(3, { message: "min error" }).max(10, { message: "max error" })
  string  String?
  /// @zod.custom.use(z.string().refine((val) => validator.isBIC(val), { message: 'BIC is not valid' }))
  bic     String?
  /// @zod.number.lt(10, { message: "lt error" }).gt(5, { message: "gt error" })
  float   Float
  decimal Decimal
  date    DateTime? /// @zod.date.min(new Date('2020-01-01')).max(new Date('2020-12-31'))
  bigInt  BigInt
  /// @zod.custom.use(z.lazy(() => InputJsonValue).refine((val) => myFunction(val), { message: 'Is not valid' }))
  json    Json
  bytes   Bytes
  /// @zod.custom.use(z.string().refine((val) => myFunction(val), { message: 'Is not valid' }))
  custom  String?

  exclude String? /// @zod.custom.omit(["model", "input"])
}

model User {
  id         String      @id @default(cuid()) /// @zod.string.cuid()
  email      String      @unique /// @zod.string.email({ message: "Invalid email address" })
  /// some other comment 
  /// @zod.string.min(1).max(100) some message after
  name       String?
  posts      Post[]
  profile    Profile?
  role       Role[]      @default([USER, ADMIN])
  enum       AnotherEnum @default(ONE)
  scalarList String[]

  lat Float
  lng Float

  location Location? @relation(fields: [lat, lng], references: [lat, lng])
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  content     String?
  published   Boolean       @default(false)
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  anotherEnum AnotherEnum[]
}

model Profile {
  id     Int        @id @default(autoincrement())
  bio    String
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  role   Role[]     @default([USER, ADMIN])
  second SecondEnum @default(ONE)
}

model Location {
  lat  Float
  lng  Float
  User User[]

  @@id([lat, lng])
}

// generator zod {
//   provider = "zod-prisma-types"
//   output   = "./generated"
// }

// datasource db {
//   provider          = "mysql"
//   url               = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
//   relationMode      = "prisma"
// }

// // create models for a blog
// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   published Boolean  @default(false)
//   title     String
//   content   String?
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int

//   @@index([authorId])
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }
