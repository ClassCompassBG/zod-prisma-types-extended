// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider       = "zod-prisma-types"
  output         = "./zod" // default is ./generated/zod
  useValidatorJs = true // default is false
  useDecimalJs   = true // default is true
  // imports        = "import(import { myFunction } from 'mypackage').import(import { custom } from './myfolder')" // optional
  imports        = "import(import { myFunction } from 'mypackage')"
}

enum MyValue {
  A
  B
  C
}

model Test {
  /// @zod.string({ invalid_type_error: "some error with special chars: some + -*#'substring[]*#!§$%&/{}[]", required_error: "some other", description: "some description" }).cuid()
  id         String    @id @default(cuid())
  /// some comment @zod.string({ required_error: "error", invalid_type_error: "error", wrong_type_error: "error" })
  name       String?
  value      MyValue
  /// @zod.custom.use(z.string().refine((val) => validator.isBIC(val), { message: 'BIC is not valid' }))
  bic        String?
  intTwo     Int
  int        Int?
  floatOpt   Float?
  /// @zod.number({ error: "error", some_key: "error", wrong_type_error: "error" })
  float      Float
  decimal    Decimal
  decimalOpt Decimal?
  date       DateTime  @default(now())
  dateOpt    DateTime?
  bigInt     BigInt
  bigIntOpt  BigInt?
  json       Json
  jsonOpt    Json?
  bytes      Bytes
  bytesOpt   Bytes?
  // email String @unique
  // name  Float
  // posts Post[]
}

model MyPrismaScalarsType {
  /// @zod.string({ invalid_type_error: "invalid type error" }).cuid()
  id      String    @id @default(cuid())
  /// Some comment about string @zod.string.min(3, { message: "min error" }).max(10, { message: "max error" })
  string  String?
  /// @zod.custom.use(z.string().refine((val) => validator.isBIC(val), { message: 'BIC is not valid' }))
  bic     String?
  /// @zod.number({ error: "error", some_key: "error", wrong_type_error: "error" })
  float   Float
  decimal Decimal
  date    DateTime? /// @zod.date.min(new Date('2020-01-01'))
  bigInt  BigInt
  json    Json
  bytes   Bytes
  /// @zod.custom.use(z.string().refine((val) => myFunction.validate(val), { message: 'Is not valid' }))
  custom  String?
}

model User {
  id      String      @id @default(cuid()) /// @zod.string.cuid()
  email   String      @unique /// @zod.string.email({ message: "Invalid email address" })
  /// some other comment 
  /// @zod.string.min(1).max(100) 
  name    String?
  posts   Post[]
  profile Profile?
  role    Role[]      @default([USER, ADMIN])
  enum    AnotherEnum @default(ONE)
}

// Role enum is only used as list

/// @generate.enum.listFilter
enum Role {
  USER
  ADMIN
}

// Second enum is only used as scalar

/// @generate.enum.filter
enum SecondEnum {
  ONE
  TWO
}

// Third enum is used as both a list and a scalar

/// @generate.enum.listFilter @generate.enum.filter
enum AnotherEnum {
  ONE
  TWO
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  content     String?
  published   Boolean       @default(false)
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  anotherEnum AnotherEnum[]
}

model Profile {
  id     Int        @id @default(autoincrement())
  bio    String
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  role   Role[]     @default([USER, ADMIN])
  second SecondEnum @default(ONE)
}

// /////////////////////////////////////////
// // SHARED ENUMS
// /////////////////////////////////////////

// enum MetricUnits {
//   MILLIMETER
//   CENTIMETER
//   DECIMETER
//   METER
// }

// enum BuildingLevel {
//   CELLAR /// Keller
//   BASEMENT /// Untergeschoß - needs additional level information like 1, 2
//   SOUTERRAIN /// Souterrain
//   GROUND_FLOOR /// Erdgeschoß
//   UPPER_FLOOR /// Obergeschoß - needs additional level information like 1, 2,
//   MANSARD /// Mansarde
//   ATTIC /// Dachboden
// }

// /////////////////////////////////////////
// // GEO DATA
// /////////////////////////////////////////

// // geo data is used to determine the location of objects and companies with the corresponding city, district, ...
// // the geo data of an object is unique in a sense that there can only be one object at on "geolocation"
// // the geo data for the company is used to determine in which cities, districts, states, ... a company has a license
// // companies can then only add objects in the cities, districts, states where they have a license

// // VILLAGE
// //------------------------------------------------------

// /// Village => "Ortschaft"
// model Village {
//   villageRefNumber String @id /// Ortschaftskennzahl
//   village          String
//   zipCode          String

//   cityRefNumber String /// foreignKey

//   buildings Building[] // buildings located in this village

//   city City @relation(fields: [cityRefNumber], references: [cityRefNumber])

//   @@unique([villageRefNumber, cityRefNumber])
// }

// // CITY
// //------------------------------------------------------

// /// City => "Ort/Stadt"
// model City {
//   cityRefNumber      String   @id /// Gemeindekennziffer 
//   city               String
//   zipCode            String
//   additionalZipCodes String[]

//   districtRefNumber String /// foreignKey

//   villages  Village[] // villages connected to this city
//   companies Company[] // companies that are active in city
//   buildings Building[] // buildings located in this city

//   district                  District                    @relation(fields: [districtRefNumber], references: [districtRefNumber])
//   cityAdministration        CityAdministration?
//   cityAdministrationHistory CityAdministrationHistory[]

//   @@unique([cityRefNumber, districtRefNumber])
// }

// /// CityAdministration => "Gemeinde-/Stadtverwaltung"
// model CityAdministration {
//   cityRefNumber String @id

//   street    String
//   streetNum String

//   phoneNumber String
//   fax         String?
//   email       String

//   createdAt   DateTime @default(now())
//   createdById String
//   createdBy   User     @relation("createdCityAdministrations", fields: [createdById], references: [id])

//   updatedAt   DateTime @updatedAt
//   updatedById String?
//   updatedBy   User?    @relation("updatedCityAdministrations", fields: [updatedById], references: [id])

//   departments CityAdministrationDepartment[]

//   city City @relation(fields: [cityRefNumber], references: [cityRefNumber])
// }

// model CityAdministrationHistory {
//   id String @id @default(uuid())

//   cityRefNumber String

//   street    String
//   streetNum String

//   phoneNumber String
//   fax         String?
//   email       String

//   createdAt   DateTime @default(now())
//   createdById String
//   createdBy   User     @relation("createdCityAdministrationsHistory", fields: [createdById], references: [id])

//   city City @relation(fields: [cityRefNumber], references: [cityRefNumber])

//   @@unique([cityRefNumber, createdAt])
// }

// /// CityAdministrationDepartment => "Gemeinde-/Stadtverwaltung Abteilungen"
// model CityAdministrationDepartment {
//   departmentId CityAdministrationDepartmentEnum @id

//   email String
//   phone String
//   fax   String?

//   createdAt   DateTime @default(now())
//   createdById String
//   createdBy   User     @relation("createdCityAdministrationDepartments", fields: [createdById], references: [id])

//   updatedAt   DateTime @updatedAt
//   updatedById String
//   updatedBy   User     @relation("updatedCityAdministrationDepartments", fields: [updatedById], references: [id])

//   cityAdministration CityAdministration @relation(fields: [cityRefNumber], references: [cityRefNumber])
//   cityRefNumber      String
// }

// model CityAdministrationDepartmentHistroy {
//   id String @id @default(uuid())

//   departmentId CityAdministrationDepartmentEnum

//   email String
//   phone String
//   fax   String?

//   createdAt   DateTime @default(now())
//   createdById String
//   createdBy   User     @relation("createdCityAdministrationsDepartmentHistory", fields: [createdById], references: [id])

//   @@unique([departmentId, createdAt])
// }

// enum CityAdministrationDepartmentEnum {
//   HEAD_OF_OFFICE /// Amtsleitung
//   BUILDING_DEPARTMENT /// Bauamt
//   FINANCIAL_DEPARTMENT /// Finanzverwaltung
//   ADMINISTRATIVE_BUREAU /// Verwaltungsbüro
//   CITIZENS_SERVICE /// Bürgerbüro
// }

// // DISTRICT
// //------------------------------------------------------

// /// District => "Bezirk"
// model District {
//   districtRefNumber String @id /// "Bezirkskennzahl" 
//   district          String @unique

//   stateRefNumber String /// foreignKey

//   cities    City[]
//   buildings Building[] // buildings located in this district

//   state             State              @relation(fields: [stateRefNumber], references: [stateRefNumber])
//   districtAuthority DistrictAuthority?

//   @@unique([districtRefNumber, stateRefNumber])
// }

// /// District Authority => "Bezirkshauptmannschaft"
// model DistrictAuthority {
//   districtRefNumber String @id

//   street    String
//   streetNum String
//   city      String
//   zipCode   String

//   phone String
//   fax   String?
//   email String

//   district District @relation(fields: [districtRefNumber], references: [districtRefNumber])
// }

// // STATE
// //------------------------------------------------------

// /// State => "Bundesland"
// model State {
//   stateRefNumber String @id /// "Bundeslandkennzahl"
//   state          String @unique

//   countryCode String /// foreignKey

//   districts District[]
//   buildings Building[] // buildings located in this state

//   country Country @relation(fields: [countryCode], references: [countryCode])

//   @@unique([stateRefNumber, countryCode])
// }

// // COUNTRY
// //------------------------------------------------------

// /// Country => "Staat"
// model Country {
//   countryCode String @id
//   country     String @unique

//   states    State[]
//   buildings Building[] // buildings located in this country
// }

// /////////////////////////////////////////
// // UPLOAD
// /////////////////////////////////////////

// model Upload {
//   id String @id @default(cuid())

//   url        String
//   localPath  String?
//   filename   String
//   label      String
//   filetype   String
//   filesize   Float?
//   dimensionX Int?
//   dimensionY Int?
//   status     UploadStatus

//   companyId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   company Company @relation(fields: [companyId], references: [id])

//   @@index([companyId, filetype, filename, url])
// }

// enum UploadStatus {
//   UPLOADING
//   LOCAL_ONLY
//   SUCCESS
//   ERROR
//   PENDING
// }

// /////////////////////////////////////////
// // USER
// /////////////////////////////////////////

// model User {
//   id String @id @default(cuid())

//   appellation String
//   prefix      String?
//   firstName   String
//   middleName  String?
//   lastName    String
//   suffix      String?

//   username String? @unique
//   email    String  @unique
//   password String? /// is optional to make it easier to handle typing for update function

//   isCompanyOwner Boolean        @default(false) // uses user's personal info when printing headers on invoices, reports, ...
//   isArchived     Boolean        @default(false)
//   department     UserDepartment @default(EXTERNAL_WORK)
//   position       UserPosition   @default(JOURNEYMAN_GRADUATED)
//   status         UserStatus     @default(ACTIVE)
//   userRole       UserRole       @default(WORKER) // grants access to different base functions of programm
//   guildAccess    GuildAccess    @default(NONE) // grants access to guild functions like managing the defect catalogue
//   globalAccess   GlobalAccess   @default(NONE) // grants access to invoiceing for companies, priviliges for providing support, ...

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   settings       UserSettings?
//   additionalInfo UserAdditionalInfo?
//   bankAccounts   UserBankAccount[]
//   addresses      UserAddress[]
//   emailAddresses UserEmailAddress[]
//   phoneNumbers   UserPhoneNumber[]

//   createdCityAdministrations        CityAdministration[]        @relation("createdCityAdministrations")
//   updatedCityAdministrations        CityAdministration[]        @relation("updatedCityAdministrations")
//   createdCityAdministrationsHistory CityAdministrationHistory[] @relation("createdCityAdministrationsHistory")

//   createdCityAdministrationDepartment    CityAdministrationDepartment[]        @relation("createdCityAdministrationDepartments")
//   udatedCityAdministrationDepartment     CityAdministrationDepartment[]        @relation("updatedCityAdministrationDepartments")
//   createdAdministrationDepartmentHistroy CityAdministrationDepartmentHistroy[] @relation("createdCityAdministrationsDepartmentHistory")

//   company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   @@index([companyId, lastName, firstName])
//   @@index([companyId, position, userRole, status, lastName, firstName])
// }

// enum UserRole {
//   SUPERUSER
//   ADMIN
//   MASTER
//   WORKER
//   OFFICE
// }

// enum UserDepartment {
//   MANAGEMENT
//   ADMINISTRATION
//   EXTERNAL_WORK
//   IT
// }

// enum UserPosition {
//   PROPRIETOR
//   ASSOCIATE
//   MASTER
//   JOURNEYMAN_QUALIFIED
//   JOURNEYMAN_GRADUATED
//   JOURNEYMAN_TRAINED
//   OFFICEWORKER
//   APPRENTICE
//   LABORER
// }

// enum UserStatus {
//   ACTIVE
//   INACTIVE
//   ABSTENTION
//   LAID_OFF
//   NONRETAINED
//   ARCHIVED
// }

// enum GuildAccess {
//   NONE
//   GUILD_ADMIN
//   GUILD_MANAGER
//   TECHNICAL_STAFF
//   FINANCIAL_STAFF
// }

// enum GlobalAccess {
//   NONE
//   FULL_ACCESS
// }

// // USER BANK ACCOUNT
// //------------------------------------------------------

// model UserBankAccount {
//   id String @id @default(cuid())

//   iban     String
//   bic      String
//   bankName String

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId String?
//   user   User?   @relation(fields: [userId], references: [id])

//   @@unique([iban, userId])
// }

// // USER SETTINGS
// //------------------------------------------------------

// model UserSettings {
//   id String @id

//   darkModeAuto     Boolean @default(false)
//   darkMode         Boolean @default(false)
//   mainHelperText   Boolean @default(true)
//   dialogHelperText Boolean @default(false)
//   smallInputs      Boolean @default(false)
//   notifications    Boolean @default(false)
//   reportDefaults   Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// // USER ADDITIONS
// //------------------------------------------------------

// model UserAdditionalInfo {
//   id String @id

//   svNr                   String?
//   dateOfBirth            DateTime?
//   officialApprovalNumber String? // "Prüfnummer" - for reports if each employee needs separate number
//   info                   String?
//   salary                 Float?
//   employmentDate         DateTime?
//   weeklyHours            Float?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// // USER ADDRESS
// //------------------------------------------------------

// model UserAddress {
//   id String @id @default(cuid())

//   street    String
//   streetNum String
//   stair     String?
//   floor     String?
//   door      String?
//   city      String
//   zipCode   String
//   state     String
//   country   String

//   info  String?
//   label String?

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId String?

//   user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([street, streetNum, zipCode, userId])
// }

// // USER EMAIL ADDRESS
// //------------------------------------------------------

// model UserEmailAddress {
//   id String @id @default(cuid())

//   email String
//   label String?
//   info  String?

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId String?

//   user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([email, userId])
// }

// // USER PHONE NUMBER
// //------------------------------------------------------

// model UserPhoneNumber {
//   id String @id @default(cuid())

//   label       String?
//   info        String?
//   phoneNumber String

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId String?

//   user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([phoneNumber, userId])
// }

// ////////////////////////////////////////
// // COMPANY
// /////////////////////////////////////////

// model Company {
//   id String @id @default(cuid())

//   name          String
//   status        CompanyStatus @default(ACTIVE) // relevant when someone wants to close his/her company and deletion is not possible because of legal reasons
//   corporateForm CorporateForm @default(SOLE_PROPRIETOR)
//   businessPlan  BusinessPlan  @default(MEDIUM_BUSINESS)

//   officialApprovalNumber String? // "Prüfnummer" - number for reports, ...
//   companyRegisterNr      String? // "Firmenbuchnummer"
//   dvrNumber              String? // "Datenverarbeitungsregister"
//   employerNr             String?
//   taxNumber              String // "Steuernummer" 
//   vatNumber              String // "Umsatzsteuernummer" 

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   addresses         CompanyAddress[]
//   emailAddresses    CompanyEmailAddress[]
//   phoneNumbers      CompanyPhoneNumber[]
//   websites          CompanyWebsite[]
//   bankAccounts      CompanyBankAccount[]
//   invoiceRecipients CompanyInvoiceRecipient[]

//   isActiveInCities     City[]
//   users                User[]
//   uploads              Upload[]
//   buildings            Building[]
//   clients              Client[]
//   invoices             Invoice[]
//   regions              Region[]
//   customMaterials      Material[]
//   customManufacturers  Manufacturer[]
//   chimneyTypes         ChimneyType[]
//   chimneys             Chimney[]
//   chimneyTypeMaterials ChimneyTypeMaterial[]
// }

// enum CorporateForm {
//   SOLE_PROPRIETOR // Einzelunternehmer
//   OPEN_PARTNERSHIP // OG
//   LIMITED_PARTNERSHIP // KG
//   REGISTERD_COMPANY // Eingetragenes Unternehmen
// }

// enum BusinessPlan {
//   SMALL_BUSINESS
//   MEDIUM_BUSINESS
//   LARGE_BUSINESS
// }

// enum CompanyStatus {
//   ACTIVE
//   ARCHIVED
//   TRANSFERED
// }

// // COMPANY ADDRESS
// //------------------------------------------------------

// model CompanyAddress {
//   id String @id @default(cuid())

//   street    String
//   streetNum String
//   stair     String?
//   floor     String?
//   door      String?
//   city      String
//   zipCode   String
//   state     String
//   country   String

//   isPrimary Boolean @default(false)
//   isBilling Boolean @default(false)
//   isContact Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   coordinates CompanyCoordinates?

//   company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   @@unique([street, streetNum, zipCode, companyId])
// }

// // COMPANY ADDRESS GEOLOCATION
// //------------------------------------------------------

// model CompanyCoordinates {
//   id String @id @default(cuid())

//   longitude Float
//   latitude  Float
//   elevation Float?

//   companyAddressId String @unique

//   companyAddress CompanyAddress @relation(fields: [companyAddressId], references: [id], onDelete: Cascade)

//   @@unique([longitude, latitude])
// }

// // COMPANY PHONE NUMBER
// //------------------------------------------------------

// model CompanyPhoneNumber {
//   id String @id @default(cuid())

//   label       String?
//   phoneNumber String

//   isPrimary  Boolean @default(false) // main phone number is marked as primary in headers (invoices, reports,...)
//   isOfficial Boolean @default(false) // official phone numbers are shown in headers (invoices, reports,...)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   @@unique([phoneNumber, companyId])
// }

// // COMPANY EMAIL ADDRESS
// //------------------------------------------------------

// model CompanyEmailAddress {
//   id String @id @default(cuid())

//   label String?
//   email String

//   isPrimary  Boolean @default(false) // main email addresse is marked as primary in headers (invoices, reports,...)
//   isOfficial Boolean @default(false) // official email addresses are shown in headers (invoices, reports,...)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   @@unique([email, companyId])
// }

// // USER WEBSITE
// //------------------------------------------------------

// model CompanyWebsite {
//   id String @id @default(cuid())

//   label   String?
//   website String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   isPrimary  Boolean @default(false) // main website is marked as primary in headers (invoices, reports,...)
//   isOfficial Boolean @default(false) // official websites are shown in headers (invoices, reports,...)

//   companyId String

//   company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   @@unique([website, companyId])
// }

// // COMPANY BANK ACCOUNTS
// //------------------------------------------------------

// model CompanyBankAccount {
//   id String @id @default(cuid())

//   iban     String
//   bic      String
//   bankName String

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   @@unique([iban, companyId])
// }

// // COMPANY ENUMS
// //------------------------------------------------------

// model CompanyInvoiceRecipient {
//   id String @id @default(cuid())

//   appellation String
//   prefix      String?
//   firstName   String
//   middleName  String?
//   lastName    String
//   suffix      String?

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
// }

// // COMPANY ENUMS
// //------------------------------------------------------

// // enum CompanyTextCategory {
// //   UNDEFINED
// //   INVOICE_HEADER
// //   INVOICE_FOOTER
// //   INVOICE_SIDE
// //   REMINDER
// //   COMPANY_HEADER
// //   ADVERTISEMENT
// // }

// // enum CompanyImageCategory {
// //   UNDEFINED
// //   INVOICE_HEADER
// //   INVOICE_FOOTER
// //   INVOICE_SIDE
// //   REMINDER
// //   COMPANY_HEADER
// //   ADVERTISEMENT
// // }

// /////////////////////////////////////////
// //    REGION
// /////////////////////////////////////////

// /// Region => "Kehrgebiet"
// model Region {
//   id String @id @default(cuid())

//   label String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   buildings Building[]

//   company Company @relation(fields: [companyId], references: [id])

//   @@unique([label, companyId])
// }

// /////////////////////////////////////////
// //    OBJECT
// /////////////////////////////////////////

// model Building {
//   id         String @id @default(cuid())
//   identifier String /// can be customized by user - is unique per company

//   street    String
//   streetNum String?
//   zipCode   String

//   houseName   String? /// additional name of buildings like many farmhouses have
//   addressText String? /// additional text that is printed to the address on invoices e.g. Jagdhütte Ebersegg
//   status      BuildingStatus @default(ACTIVE)

//   coordinates BuildingCoordinates?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   villageRefNumber  String?
//   cityRefNumber     String
//   districtRefNumber String
//   stateRefNumber    String
//   countryCode       String

//   ownerId            String?
//   residentId         String?
//   invoiceRecipientId String?
//   invoiceAddressId   String?
//   regionId           String?
//   companyId          String

//   village          Village?       @relation(fields: [villageRefNumber], references: [villageRefNumber], onDelete: SetNull)
//   city             City           @relation(fields: [cityRefNumber], references: [cityRefNumber], onDelete: NoAction)
//   district         District       @relation(fields: [districtRefNumber], references: [districtRefNumber], onDelete: NoAction)
//   state            State          @relation(fields: [stateRefNumber], references: [stateRefNumber], onDelete: NoAction)
//   country          Country        @relation(fields: [countryCode], references: [countryCode], onDelete: NoAction)
//   owner            Client?        @relation("BuildingOwner", fields: [ownerId], references: [id], onDelete: SetNull)
//   invoiceRecipient Client?        @relation("BuildingInvoiceRecipient", fields: [invoiceRecipientId], references: [id], onDelete: SetNull)
//   invoiceAddress   ClientAddress? @relation("BuildingInvoiceAddress", fields: [invoiceAddressId], references: [id], onDelete: SetNull)
//   region           Region?        @relation(fields: [regionId], references: [id], onDelete: SetNull)
//   company          Company        @relation(fields: [companyId], references: [id], onDelete: NoAction)

//   referencedInClientAddresses ClientAddress[]           @relation("ClientAddressBuildingData")
//   residents                   Client[]                  @relation("BuildingResident")
//   reportRecipients            BuildingReportRecipient[]
//   invoices                    Invoice[]
//   apartments                  Apartment[]
//   chmineys                    Chimney[]
//   chimneyGroups               ChimneyGroup[]

//   @@unique([identifier, companyId])
// }

// // BUILDING REPORT RECIPIENT
// //------------------------------------------------------

// /// BuildingReportRecipient combines a client and a client address 
// /// to save all necessary information that is used to determin who
// /// gets reports created for the building

// model BuildingReportRecipient {
//   id String @id @default(cuid())

//   buildingId  String
//   recipientId String
//   addressId   String

//   recipient Client        @relation(fields: [recipientId], references: [id], onDelete: NoAction)
//   address   ClientAddress @relation(fields: [addressId], references: [id], onDelete: NoAction)
//   building  Building      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
// }

// // BUILDING GEOLOCATION
// //------------------------------------------------------

// model BuildingCoordinates {
//   id String @id @default(cuid())

//   longitude Float
//   latitude  Float
//   elevation Float?

//   buildingId String @unique

//   building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

//   @@unique([longitude, latitude])
// }

// // BUILDING ENUMS
// //------------------------------------------------------

// enum BuildingStatus {
//   ACTIVE
//   EMPTY
//   ARCHIVED
// }

// // APPARTMENT
// //------------------------------------------------------

// model Apartment {
//   id String @id @default(cuid())

//   stair Int?
//   level BuildingLevel?
//   floor Int?
//   door  Int

//   ownerId            String?
//   invoiceRecipientId String?
//   invoiceAddressId   String?
//   buildingId         String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   owner            Client?        @relation("ApartmentOwner", fields: [ownerId], references: [id], onDelete: SetNull)
//   invoiceRecipient Client?        @relation("ApartmentInvoiceRecipient", fields: [invoiceRecipientId], references: [id], onDelete: SetNull)
//   invoiceAddress   ClientAddress? @relation("ApartmentInvoiceAddress", fields: [invoiceAddressId], references: [id], onDelete: SetNull)
//   building         Building       @relation(fields: [buildingId], references: [id], onDelete: Cascade)

//   residents                   Client[]        @relation("ApartmentResident")
//   invoices                    Invoice[]
//   referencedInClientAddresses ClientAddress[] @relation("ClientAddressApartmentInfo")
//   chmineys                    Chimney[]

//   @@unique([buildingId, door])
// }

// /////////////////////////////////////////
// //    CLIENT
// /////////////////////////////////////////

// model Client {
//   id         String @id @default(cuid())
//   identifier String /// can be customized by user - is unique per company

//   email    String? @unique /// used to login a client into the client portal
//   username String? @unique /// used to login a client into the client portal
//   password String? /// used to login a client into the client portal

//   kind     ClientKind /// defines if the client is a person or a company
//   infoText String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String

//   personInfo   ClientPersonInfo? /// if client is business this is used for ready-at-hand information
//   businessInfo ClientBusinessInfo?

//   addresses      ClientAddress[]
//   bankAccounts   ClientBankAccount[]
//   emailAddresses ClientEmailAddress[]
//   phoneNumbers   ClientPhoneNumber[]
//   websites       ClientWebsite[]

//   ownedBuildings               Building[]                @relation("BuildingOwner")
//   residentInBuildings          Building[]                @relation("BuildingResident")
//   invoiceRecipientForBuildings Building[]                @relation("BuildingInvoiceRecipient")
//   reportRecipientForBuildings  BuildingReportRecipient[]

//   ownedApartments               Apartment[] @relation("ApartmentOwner")
//   residentInApartments          Apartment[] @relation("ApartmentResident")
//   invoiceRecipientForApartments Apartment[] @relation("ApartmentInvoiceRecipient")

//   invoices Invoice[]

//   company Company @relation(fields: [companyId], references: [id])

//   @@unique([identifier, companyId])
// }

// // CLIENT PERSON INFOS
// //------------------------------------------------------

// model ClientPersonInfo {
//   id String @id

//   appellation String
//   prefix      String?
//   firstName   String
//   middleName  String?
//   lastName    String
//   suffix      String?

//   client Client @relation(fields: [id], references: [id])
// }

// // CLIENT BUSINESS INFOS
// //------------------------------------------------------

// model ClientBusinessInfo {
//   id String @id

//   companyName   String
//   corporateForm String?
//   department    String?

//   companyRegisterNr String?

//   taxId String?
//   vatId String?

//   client Client @relation(fields: [id], references: [id])
// }

// // CLIENT BANK ACCOUNTS
// //------------------------------------------------------

// model ClientBankAccount {
//   id String @id @default(cuid())

//   iban     String
//   bic      String
//   bankName String

//   isPrimary Boolean @default(false)
//   isBilling Boolean @default(false) /// if "true" a SEPAAuthorization should be enforced

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   clientId String

//   sepaAuthorization ClientSepaAuthorization?

//   client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

//   @@unique([iban, clientId])
// }

// // CLIENT SEPA AUTHORIZATION
// //------------------------------------------------------

// // connect to signature or add file to proof authorization

// model ClientSepaAuthorization {
//   id String @id

//   authorizationDate DateTime  @default(now())
//   revocationDate    DateTime? // necessary or just delete??

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   bankAccount ClientBankAccount @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// // CLIENT ADDRESS
// //------------------------------------------------------

// /// ClientAddress stores all address information for clients
// /// that can be used as invoice adresses or for reports
// ///
// /// When a client is added as owner of a building a ClientAddress
// /// is created that links to the building
// ///
// /// When a client is added as resident in an apartment a ClientAddress
// /// is created that links to the building and to the apartment
// ///
// /// When a custom ClientAddress is created the address data is created 
// /// as CustomAddressData 

// model ClientAddress {
//   id String @id @default(cuid())

//   isPrimary Boolean @default(false)
//   isContact Boolean @default(false)

//   infoText String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   buildingId  String?
//   apartmentId String?
//   clientId    String

//   /// one-to-one | when no buildingAddress or apartmentInfo is provided custom address data can be provided
//   customAddress ClientAddressData?

//   /// When a client is connected to a building a ClientAddress is created which references the building itself.
//   buildingAddress Building? @relation("ClientAddressBuildingData", fields: [buildingId], references: [id], onDelete: SetNull)

//   /// When a client is connected to an apartement a ClientAddress is created which references the building and the apartement. 
//   apartmentInfo Apartment? @relation("ClientAddressApartmentInfo", fields: [apartmentId], references: [id], onDelete: SetNull)

//   invoiceAddressForBuildings  Building[]                @relation("BuildingInvoiceAddress")
//   invoiceAddressForApartments Apartment[]               @relation("ApartmentInvoiceAddress")
//   reportAddressForBuildings   BuildingReportRecipient[]

//   client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

//   @@unique([clientId, buildingId])
// }

// // COMPANY ADDRESS DATA
// //------------------------------------------------------

// /// ClientAddressData is used when a custom ClientAddress is created
// /// which is not connected to a building or an apartment

// model ClientAddressData {
//   id String @id @default(cuid())

//   street    String
//   streetNum String
//   city      String
//   zipCode   String
//   state     String
//   country   String

//   stair Int?
//   level BuildingLevel?
//   floor Int?
//   door  Int?

//   // when a clientAddress is deleted the ClientAddressData should also be deleted
//   clientAddress ClientAddress @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// // COMPANY PHONE NUMBER
// //------------------------------------------------------

// model ClientPhoneNumber {
//   id String @id @default(cuid())

//   label       String?
//   infoText    String?
//   phoneNumber String

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   clientId String

//   client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

//   @@unique([phoneNumber, clientId])
// }

// // COMPANY EMAIL ADDRESS
// //------------------------------------------------------

// model ClientEmailAddress {
//   id String @id @default(cuid())

//   label    String?
//   infoText String?
//   email    String

//   isPrimary Boolean @default(false)
//   isBilling Boolean @default(false)
//   isContact Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   clientId String

//   client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

//   @@unique([email, clientId])
// }

// // USER WEBSITE
// //------------------------------------------------------

// model ClientWebsite {
//   id String @id @default(cuid())

//   label    String?
//   infoText String?
//   website  String

//   isPrimary Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   clientId String?

//   client Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

//   @@unique([website, clientId])
// }

// // CLIENT ENUMS
// //------------------------------------------------------

// enum ClientKind {
//   PERSON
//   BUSINESS
// }

// /////////////////////////////////////////
// //   INVOICES
// /////////////////////////////////////////

// model Invoice {
//   id            String @id @default(cuid())
//   invoiceNumber String /// can be customized by user - is unique per company

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   clientId    String
//   buildingId  String
//   apartmentId String?
//   companyId   String

//   company   Company    @relation(fields: [companyId], references: [id])
//   client    Client     @relation(fields: [clientId], references: [id])
//   building  Building   @relation(fields: [buildingId], references: [id]) /// needs info (e.g. address) from building
//   apartment Apartment? @relation(fields: [apartmentId], references: [id])

//   @@unique([invoiceNumber, companyId])
// }

// /////////////////////////////////////////
// //   CHIMNEY
// /////////////////////////////////////////

// model Chimney {
//   id         String @id @default(cuid())
//   identifier String /// can be customized by user - is unique per building

//   label  String /// aka. name of the chimney
//   status ChimneyStatus @default(ACTIVE)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   buildingId       String
//   apartmentId      String?
//   isAlterationOfId String?
//   chimneyGroupId   String?
//   companyId        String

//   conception       ChimneyConception?
//   height           ChimneyHeight?
//   orifice          ChimneyOrifice?
//   sweepingPosition ChimneySweepingPosition?

//   company        Company       @relation(fields: [companyId], references: [id])
//   building       Building      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
//   apartment      Apartment?    @relation(fields: [apartmentId], references: [id], onDelete: SetNull)
//   chimneyGroup   ChimneyGroup? @relation(fields: [chimneyGroupId], references: [id])
//   isAlterationOf Chimney?      @relation("ChimneyAlterationRelation", fields: [isAlterationOfId], references: [id])

//   vents       ChimneyVent[]
//   segments    ChimneySegment[]
//   alterations Chimney[]        @relation("ChimneyAlterationRelation")

//   @@unique([identifier, buildingId])
// }

// // CHIMNEY ENUMS
// //------------------------------------------------------

// enum ChimneyStatus {
//   ACTIVE
//   UNUSED
//   VENTILATION
//   CABLE_FUNNEL
//   GAS_LINE_SHAFT /// "Gasleitungsschacht"
//   INSTALLATION_SHAFT /// e.g. for district-heating pipes
// }

// /////////////////////////////////////////
// // CHIMNEY GROUP
// /////////////////////////////////////////

// model ChimneyGroup {
//   id     String @id @default(cuid())
//   number Int
//   label  String

//   buildingId String?

//   chimneys Chimney[]

//   building Building? @relation(fields: [buildingId], references: [id])

//   @@unique([buildingId, label])
//   @@unique([buildingId, number])
// }

// /////////////////////////////////////////
// //   CHIMNEY COMCEPITON
// /////////////////////////////////////////

// model ChimneyConception {
//   id String @id

//   conception        ChimneyCostructionType
//   position          ChimneyPosition
//   base              ChimneyBase
//   condensationDrain ChimneyCondensationDrain

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   chimney Chimney @relation(fields: [id], references: [id])
// }

// // CHIMNEY COMCEPITON ENUMS
// //------------------------------------------------------

// enum ChimneyCostructionType {
//   FREE_STANDING_CHIMNEY /// Chimney that is standing free without any contact to a building
//   CHIMNEY_IN_BUILDING /// Chimney that is located inside a building or has contact to a building
// }

// enum ChimneyPosition {
//   ISIDE_BUILDING
//   EXTERIOR_WALL_NO_CONTACT
//   EXTERIOR_WALL_ONESIDE_CONTACT
//   EXTERIOR_WALL_TWOSIDE_CONTACT
//   EXTERIOR_WALL_THREESIDE_CONTACT
//   HORIZONTAL_THROUGH_WALL
// }

// enum ChimneyBase {
//   PEDESTAL /// most chimneys that 
//   WALL_CONSOLE
//   ON_FURNACE
// }

// enum ChimneyCondensationDrain {
//   UNKNOWN
//   NOT_VISIBEL
//   NON_EXISTING
//   INTO_THE_OPEN
//   CONNECTED_TO_CANAL
//   NOT_CONNECTED_TO_CANAL
// }

// /////////////////////////////////////////
// //  CHIMNEY HEIGHT
// /////////////////////////////////////////

// model ChimneyHeight {
//   id String @id

//   height     Float /// height of the whole chimney
//   heightUnit MetricUnits @default(METER)

//   heightEffective     Float /// hight from connector to nozzle
//   heightEffectiveUnit MetricUnits @default(METER)

//   heightColdArea     Float       @default(0) /// height e.g. in the attic
//   heightColdAreaUnit MetricUnits @default(METER)

//   heightAboveRoof     Float       @default(0)
//   heightAboveRoofUnit MetricUnits @default(METER)

//   heightAboveRoofEdge     Float? /// if position is outside building
//   heightAboveRoofEdgeUnit MetricUnits @default(METER)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   chimney Chimney @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// /////////////////////////////////////////
// //  CHIMNEY VEMT
// /////////////////////////////////////////

// model ChimneyVent {
//   id String @id @default(cuid())

//   type     ChimneyVentType
//   location BuildingLevel
//   level    Int? /// if location is UPPER_FLOOR or BASEMENT

//   // extract to external check
//   heightAboveFloor     Int? /// needs to be greater than 50 cm to fulfill norm
//   heightAboveFloorUnit MetricUnits @default(CENTIMETER)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   chmineyId String

//   isSweepingPosition ChimneySweepingPosition?

//   chminey Chimney @relation(fields: [chmineyId], references: [id], onDelete: Cascade)
// }

// // CHIMNEY VEMT ENUMS
// //------------------------------------------------------

// enum ChimneyVentType {
//   SWEEPING_VENT
//   CLEANING_VENT
//   ADDITIONAL_VENT
// }

// /////////////////////////////////////////
// //  CHIMNEY ORIFICE (Fangmündung)
// /////////////////////////////////////////

// model ChimneyOrifice {
//   id String @id

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   orificeAttachmentId String?

//   isSweepingPosition ChimneySweepingPosition?
//   attachment         ChimneyOrificeAttachment? @relation(fields: [orificeAttachmentId], references: [id])
//   chimney            Chimney                   @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// // CHIMNEY ORIFICE ATTACHMENT
// //------------------------------------------------------

// // Orifice attachments are basically predefined e.g. from Aladin database.
// // Users should be able to create custom attachments as long as they 
// // have the necessary infos like ratio and zeta values

// model ChimneyOrificeAttachment {
//   id String @id

//   info  String?
//   type  String?
//   ratio Float?
//   zeta  Float?

//   // add "headFan" and "Exhaust Gas silencer"

//   manufacturerId String

//   usedOnChimneyOrifices ChimneyOrifice[]

//   manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id])
// }

// /////////////////////////////////////////
// //  CHIMNEY SWEEPING POSITION
// /////////////////////////////////////////

// model ChimneySweepingPosition {
//   id String @id @default(cuid())

//   ventId    String? @unique
//   orificeId String? @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   orifice ChimneyOrifice? @relation(fields: [orificeId], references: [id])
//   vent    ChimneyVent?    @relation(fields: [ventId], references: [id])
//   chimney Chimney         @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// /////////////////////////////////////////
// //   CHIMNEY SEGMENT
// /////////////////////////////////////////

// model ChimneySegment {
//   id String @id @default(cuid())

//   sortingNumber Int  @default(0) /// used to determine which segment is the first (= lowest)
//   buildYear     Int? @db.SmallInt

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   chmineyId           String
//   chimneySystemId     String
//   chimneyShapeId      String?
//   chimneyShaftShapeId String?
//   constructorId       String?

//   // redirections

//   redirections Redirection[]
//   /// shape of the main chimney shaft
//   shape        ChimneyShape? @relation("ShapeSegmentRelation", fields: [chimneyShapeId], references: [id])
//   /// shape of the shaft of a refurbished chimney
//   sahftShape   ChimneyShape? @relation("ShaftShapeSegmentRelation", fields: [chimneyShaftShapeId], references: [id])
//   /// each chimney segment can be created by a different constructor
//   constructor  Manufacturer? @relation(fields: [constructorId], references: [id])
//   chimneyType  ChimneyType   @relation(fields: [chimneySystemId], references: [id], onDelete: NoAction)
//   chimney      Chimney       @relation(fields: [chmineyId], references: [id], onDelete: Cascade)
// }

// // CHIMNEY SEGMENT SHAPE
// //------------------------------------------------------

// // Defines the basic shape of a chimney like circle, square, rectangle, ...
// // provides different options to enter dimensions for different shapes

// model ChimneyShape {
//   id String @id @default(cuid())

//   shape ChimneySegmentShapeType

//   // enforce the following fields in the frontend according to shape
//   diameter Float?
//   width    Float?
//   depth    Float?

//   /// unit is in here to be fetched and displayed in input - should not be edited by user
//   unit MetricUnits @default(MILLIMETER)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   shapeOfChimneySegments      ChimneySegment[] @relation("ShaftShapeSegmentRelation")
//   shapeOfChimneySegmentShafts ChimneySegment[] @relation("ShapeSegmentRelation")

//   @@unique([shape, diameter, width, depth])
// }

// // ENUMS
// //------------------------------------------------------

// enum ChimneySegmentShapeType {
//   CIRCLE
//   SQUARE
//   SQUARE_ROUNDED
//   RECTANGLE
//   RECTANGLE_ROUNDED
//   SPECIAL_SHAPE
// }

// /////////////////////////////////////////
// //   CHIMNEY SYSTEM
// /////////////////////////////////////////

// // The chimney type defines all the requirements of the law or defined standards.
// // A user can pick a predifined chimney types or can create a new one which would then be 
// // only available in the corresponding company.

// // An example for a chimney type would be Schiedel Absolut, Jeremias ew-kl, ...
// // The info for manufactured chimeny systems should be provided in the database.

// model ChimneyType {
//   id String @id @default(cuid())

//   typename    String /// e.g. "Absolut" or "SIH" by Schiedel
//   info        String? /// arbitrary info like "einzügig", "mit Luftschacht", ...
//   description String?

//   design                                 ChimneyTypeDesign /// "Ausführung"
//   pressureClassType                      PressureClassType /// "Druckklasse"
//   temperatureClassType                   TemperatureClassType? /// "Temperaturklasse"
//   condensateClassType                    CondensateClassType /// "Kondensat-Beständigkeitsklasse / Betriebsweise"
//   corrosionResistanceClassType           CorrosionResistanceClassType /// "Korrosionswiderstandsklasse"
//   sootFireResistanceClassType            SootFireResistanceClassType /// "Rußbrandklasse"
//   sootFireResistanceDistance             Float /// "Abstand zu brennbaren Bauteilen"
//   sootFireResistanceDistanceUnit         MetricUnits                  @default(MILLIMETER)
//   sootFireResistanceDistanceUnitEditable Boolean                      @default(false) /// only true in custom chimneyTypes

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   manufacturerId String
//   parentId       String?
//   companyId      String?

//   chimneySegments ChimneySegment[]
//   materials       ChimneyTypeMaterial[]
//   childTypes      ChimneyType[]         @relation("ParentChildRelation")

//   chimneyTypeCategory      ChimneyTypeCategory?     @relation(fields: [design], references: [design])
//   manufacturer             Manufacturer             @relation(fields: [manufacturerId], references: [id], onDelete: NoAction)
//   pressureClass            PressureClass            @relation(fields: [pressureClassType], references: [type], onDelete: NoAction)
//   temperatureClass         TemperatureClass?        @relation(fields: [temperatureClassType], references: [type], onDelete: NoAction)
//   corrosionResistanceClass CorrosionResistanceClass @relation(fields: [corrosionResistanceClassType], references: [class])

//   createdByCompany Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade)
//   isChildOf        ChimneyType? @relation("ParentChildRelation", fields: [parentId], references: [id])

//   /// unique constraint to prevent duplicates
//   @@unique([design, condensateClassType, sootFireResistanceClassType, pressureClassType, temperatureClassType, corrosionResistanceClassType, manufacturerId])
//   // maybe this unique constraint needs to be removed - e.g. when info about 
//   // "Absolut" subcategories are stored in info field instead of typeName
//   @@unique([typename, manufacturerId])
// }

// // CHIMNEY TYPE MATERIAL
// //------------------------------------------------------

// // A ChimneyTypeMaterial connects a chimneyType to a material and defines a material thickness,
// // This thickness can be edited by a user and is saved for the company of the user.

// model ChimneyTypeMaterial {
//   id String @id @default(cuid())

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   chimneyTypeId       String
//   materialId          String
//   materialThicknessId String
//   companyId           String?

//   chimneyType       ChimneyType       @relation(fields: [chimneyTypeId], references: [id])
//   material          Material          @relation(fields: [materialId], references: [id])
//   materialThickness MaterialThickness @relation(fields: [materialThicknessId], references: [id])
//   createdByCompany  Company?          @relation(fields: [companyId], references: [id])
// }

// // CHIMNEY TYPE CATEGORY
// //------------------------------------------------------

// model ChimneyTypeCategory {
//   design      ChimneyTypeDesign @id
//   label       String
//   info        String?
//   description String?

//   svgIconId String?

//   chimneyType ChimneyType[]

//   svgIcon SvgIcon? @relation(fields: [svgIconId], references: [id])
// }

// // ENUMS
// //------------------------------------------------------

// // Chimney system designs according to aladin database

// enum ChimneyTypeDesign {
//   SINGLE_WALLED /// "Einwandig"
//   DOUBLE_WALLED /// "Doppelwandig"
//   SINGLE_WALLED_AIR_PIPE /// "Einwandig mit Luftkanal"
//   DOUBLE_WALLED_AIR_PIPE /// "Doppelwandig mit Luftkanal"
//   SINGLE_WALLED_CONCENTRIC /// "Einwandig mit Konzentrischer Luftführung"
//   DOUBLE_WALLED_CONCENTRIC /// "Doppelwandig mit Konzentrischer Luftführung"
//   SINGLE_WALLED_IN_SHAFT /// "Einwandig in Schacht"
//   DOUBLE_WALLED_IN_SHAFT /// "Doppelwandig in Schacht"
//   SINGLE_PIECE /// "Einschalig"
//   MULTI_PIECE /// "Mehrschalig"
//   SINGLE_PIECE_AIR_SHAFT /// "Einschalig mit Luftschacht"
//   MULTI_PIECE_AIR_SHAFT /// "Mehrschalig mit Luftschacht"
// }

// enum CondensateClassType {
//   D
//   W
// }

// enum SootFireResistanceClassType {
//   G /// "Rußbrandbeständig"
//   O /// "Nicht Rußbrandbeständig"
// }

// /////////////////////////////////////////
// //   CHIMNEY PRESSURE CLASS
// /////////////////////////////////////////

// // Models the chimney pressure class according to ONR 28205 5.1.2.
// // These pressure classes are predifined and cannot be edited by the user

// model PressureClass {
//   type PressureClassType @id /// "Druckklasse"

//   leackageRate  Float /// "Leckrate" in l/s.m2
//   testPressure  Int /// "Prüfdruck"
//   operatintMode PressureType /// "Betriebsweise"

//   chimneySystem ChimneyType[]
// }

// // ENUMS
// //------------------------------------------------------

// enum PressureClassType {
//   N1
//   N2
//   P1
//   P2
//   H1
//   H2
// }

// enum PressureType {
//   OVERPRESSURE
//   UNDERPRESSURE
// }

// /////////////////////////////////////////
// //   CHIMNEY TEMPERATUR CLASS
// /////////////////////////////////////////

// // Models the chimney temperatur class according to ONR 28205 5.1.1.
// // These temperatur classes are predifined and cannot be edited by the user

// model TemperatureClass {
//   type TemperatureClassType @id

//   maxTemperature Int /// in °C

//   chimneySystem ChimneyType[]
// }

// // ENUMS
// //------------------------------------------------------

// enum TemperatureClassType {
//   T080
//   T100
//   T120
//   T140
//   T160
//   T200
//   T250
//   T300
//   T400
//   T450
//   T600
//   T800
// }

// /////////////////////////////////////////
// //   CHIMNEY COOROSION RESISTANCE
// /////////////////////////////////////////

// // Models the chimney corrosion resistance class according to ONR 28205 5.1.4 & 10.2.1
// // These corrosion resistance classes are predifined and cannot be edited by the user

// model CorrosionResistanceClass {
//   class CorrosionResistanceClassType @id

//   condensateClasses CorrosionResistanceCondensateClass[]
//   chimneySystem     ChimneyType[]
// }

// // CORROSION RESISTANCE FUEL
// //------------------------------------------------------

// // Model represents condensate classes for each corrosion resistance class.
// // For each class only one entry with condensate class dry (D) and one with wet (W) can be created.
// // This approach is used to model the requirements of ONR 28205 10.2.1 Table 6

// model CorrosionResistanceCondensateClass {
//   corrosionResitanceClassType CorrosionResistanceClassType
//   condensateClassType         CondensateClassType

//   allowedFuels CorrosionResistanceCondensateClassOnFuelType[]

//   corrosionResistanceClass CorrosionResistanceClass? @relation(fields: [corrosionResitanceClassType], references: [class])

//   @@id([corrosionResitanceClassType, condensateClassType])
// }

// // CORROSION RESISTANCE FUEL ON TYPE
// //------------------------------------------------------

// // Models the relation between fuels and the condensate classes of each corrosion resistance.

// model CorrosionResistanceCondensateClassOnFuelType {
//   fuelType                    FuelType
//   corrosionResitanceClassType CorrosionResistanceClassType
//   condensateClassType         CondensateClassType

//   fuel          Fuel                               @relation(fields: [fuelType], references: [type])
//   isAllowedFuel CorrosionResistanceCondensateClass @relation(fields: [corrosionResitanceClassType, condensateClassType], references: [corrosionResitanceClassType, condensateClassType])

//   @@id([fuelType, corrosionResitanceClassType, condensateClassType])
// }

// // ENUMS
// //------------------------------------------------------

// enum CorrosionResistanceClassType {
//   CLASS_1 /// "Gas"
//   CLASS_2 /// "Gas, flüssig, Holz für offene Feuerstätten"
//   CLASS_3 /// "alle brennstoffe"
//   CLASS_V1 /// "Edelstahl Innenrohr V1" according to ONR 28205 10.2.1
//   CLASS_V2 /// "Edelstahl Innenrohr V2" according to ONR 28205 10.2.1
//   CLASS_V3 /// "Edelstahl Innenrohr V3" according to ONR 28205 10.2.1
// }

// /////////////////////////////////////////
// //    FUEL  
// /////////////////////////////////////////

// model Fuel {
//   type  FuelType @id
//   label String

//   exhaustGasData FuelExhaustGasData?

//   isFuelOfCorrosionResistanceCondenstateClasses CorrosionResistanceCondensateClassOnFuelType[]
// }

// // FUEL EXHAUST GAS DATA
// //------------------------------------------------------

// // defines values that are relevant for exhaust gas measurements or other data

// model FuelExhaustGasData {
//   fuelType FuelType @id

//   lowerHeatingValue  Float?
//   higherHeatingValue Float?
//   co2Max             Float?
//   /// default moisture content used when calculating stuff
//   moistureContent    Float?
//   sulfurContent      Float?

//   /// defines the moisture content of fuels according to ÖNORM M 7510
//   moistureContentGraph FuelMoistureContentGraph[]

//   fuel Fuel @relation(fields: [fuelType], references: [type])
// }

// // FUEL MOISTURE GRAPH CONTENT
// //------------------------------------------------------

// /// defines specific factors (a2, b) that can be relevant for calculations
// model FuelMoistureContentGraph {
//   moistureContent Float
//   fuelType        FuelType

//   a2Value Float
//   bBalue  Float

//   fuelExhaustGasData FuelExhaustGasData @relation(fields: [fuelType], references: [fuelType])

//   @@id([fuelType, moistureContent])
// }

// //  FUEL TYPE
// //------------------------------------------------------

// enum FuelType {
//   SOLID_COKE /// "Koks"
//   SOLID_BROWN_COAL /// "Braunkohle"
//   SOLID_HARD_COAL /// "Steinkohle"
//   SOLID_WOOD /// "STückholz"
//   SOLID_WOOD_CHIPS /// "Hackgut"
//   SOLID_WOOD_PELLET /// "Pellets"
//   SOLID_CORN /// "Korn"
//   GAS_NATURAL_H
//   GAS_NATURAL_L
//   GAS_BIO
//   GAS_CITY_BERLIN
//   GAS_CITY_GSP
//   GAS_LIQUID
//   OIL_EL
//   OIL_HEAVY_1
//   OIL_HEAVY_2
//   OIL_HEAVY_3
//   OIL_CANOLA /// "Rapsöl"
// }

// /////////////////////////////////////////
// //    MATERIAL  
// /////////////////////////////////////////

// // There will be base materials provided by to pick from for every user.
// // These materials can not be edited or deleted by users.
// // 
// // If a custom material is created a companyId needs to be provided.
// // This material is then only usable in the said company
// // the custom material must be connected to a predefined category

// // Materials are primarily used for calculations according to EN 13384-1 & 2 which is
// // not a priority to implement. Providing this data from the beginning is nevertheless 
// // helpful e.g. when an export to aladin option should be implemented

// model Material {
//   id String @id @default(cuid())

//   name        String /// "Mauerwerk"
//   info        String?
//   description String?

//   categoryId           Int
//   materialPropertiesId String?
//   companyId            String?
//   parentId             String?
//   maximalThicknessId   String?
//   minimalThicknessId   String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   /// default thicknesses are displayed to the user when selecting a thickness in a dropdown menu
//   defaultThicknesses         MaterialThickness[]
//   usedInChimenyTypeMaterials ChimneyTypeMaterial[]
//   childMaterials             Material[]            @relation("ParentChildRelation")

//   materialProperties MaterialProperties?
//   maximalThickness   MaterialThickness?  @relation("MaximalThickness", fields: [maximalThicknessId], references: [id], onDelete: NoAction)
//   minimalThickness   MaterialThickness?  @relation("MinimalThickness", fields: [minimalThicknessId], references: [id], onDelete: NoAction)

//   category MaterialCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction)

//   /// company is only connected when a custom material is created
//   createdByCompany Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

//   /// a child material is created when a base material is edited or
//   /// when a custom material is created based on a based material
//   isChildOf Material? @relation("ParentChildRelation", fields: [parentId], references: [id], onDelete: SetNull)
// }

// //  MATERIAL PROPERTIES
// //------------------------------------------------------

// // Defines the properties for the corresponding material.
// // These properties are primarily used for calculations according to EN 13384-1 & 2

// model MaterialProperties {
//   id String @id

//   averageRoughness            Float? /// "Mittlere Rauigkeit" in m
//   thermalInsulationResistance Float? /// "Wärmedurchlasswiderstand"
//   specificHeatCapacity        Float? /// "Spezifische Wärmekapazität"
//   radiationCoefficient        Float? /// "Strahlungsbeiwert"
//   density                     Int? /// "Dichte" in kg/m3

//   thermoconductivity Thermoconductivity[] /// "Wärmeleitfähigkeit" - can be different for different temperatures - therefor -> list

//   material Material @relation(fields: [id], references: [id], onDelete: Cascade)
// }

// //  MATERIAL CATEGORY
// //------------------------------------------------------

// // Materials have different themromconductivity based on the temperatur
// // see EN 13384-1 table B.5

// model Thermoconductivity {
//   id String @id @default(cuid())

//   temperatur         Float /// in °C
//   thermoconductivity Float /// in W/(m * K)

//   materialPropertiesId String

//   material MaterialProperties @relation(fields: [materialPropertiesId], references: [id], onDelete: Cascade)

//   @@unique([materialPropertiesId, temperatur, thermoconductivity])
// }

// //  MATERIAL THICKNESS
// //------------------------------------------------------

// // defines the thickness of a material
// // usual thicknesses are predefined for each metric unit

// model MaterialThickness {
//   id String @id @default(cuid())

//   thickness     Float
//   thicknessUnit MetricUnits @default(MILLIMETER)

//   defaultInMaterials            Material[]
//   usedInChimneyTypeMaterials    ChimneyTypeMaterial[]
//   isMaximalThicknessInMaterials Material[]            @relation("MaximalThickness")
//   isMinimalThicknessInMaterials Material[]            @relation("MinimalThickness")

//   @@unique([thickness, thicknessUnit])
// }

// //  MATERIAL CATEGORY
// //------------------------------------------------------

// model MaterialCategory {
//   id Int @id @default(autoincrement()) @db.SmallInt /// int is used to predifine a sort order 

//   label       String  @unique
//   info        String?
//   description String?

//   svgIconId String?

//   materials Material[]

//   svgIcon SvgIcon? @relation(fields: [svgIconId], references: [id], onDelete: NoAction)
// }

// /////////////////////////////////////////
// //    MANUFACTURER
// /////////////////////////////////////////

// // There will be a pool of manufacturers availabel for every user to choose from.
// // Additionally each user can create a custom manufacturer
// //
// // Maybe it makes sense to make custom Manufacturers available for all companies 
// // This would be in the sens of a community effort to build a solid manufacturer / constructor database
// // This would require to add permissions so the manufacturer can then be edited by other company users
// // Maybe with a flag that the creator can grant edit rights to other users

// model Manufacturer {
//   id String @id @default(cuid())

//   label String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   companyId String?

//   // address and contact need to be in a seperate model because manufacturers like 
//   // self-assembly (Selbstmontage) do not have an address or contact data and thus
//   // required fields would not be possible
//   address ManufacturerAddress?
//   contact ManufacturerContact?

//   /// company is only connected when a custom manufacturer is created
//   company Company? @relation(fields: [companyId], references: [id])

//   categories                   ManufacturerCategory[]
//   orificeAttachment            ChimneyOrificeAttachment[]
//   manufacturerOfChimneyTypes   ChimneyType[]
//   constructorOfChimneySegments ChimneySegment[]

//   /// guarantee that for each custom manufacturer no duplicates are allowed
//   @@unique([companyId, label])
// }

// // MANUFACTURER CATEGORY 
// //------------------------------------------------------

// // There should be a few specified categories like manufacturers for chimneys,
// // furnaces, connectors, attachements and also craftsmen like plumber, stove setter, and so on

// // Users are not allowed to create new categories

// model ManufacturerCategory {
//   id String @id @default(cuid())

//   label String @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   canufacturers Manufacturer[]
// }

// // MANUFACTURER ADDRESS
// //------------------------------------------------------

// model ManufacturerAddress {
//   id String @id

//   street    String
//   streetNum String?
//   stair     String?
//   floor     String?
//   door      String?
//   zipCode   String
//   city      String
//   country   String
//   state     String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   manufacturer Manufacturer @relation(fields: [id], references: [id])
// }

// // MANUFACTURER CONTACT
// //------------------------------------------------------

// model ManufacturerContact {
//   id String @id

//   phoneNumber String?
//   faxNumber   String?
//   email       String?
//   website     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   manufacturer Manufacturer @relation(fields: [id], references: [id])
// }

// /////////////////////////////////////////
// //  REDIRECTION DATA 
// /////////////////////////////////////////

// // The calculation of the resistors needs to be implemented 
// // according to en 13384 1-2 table B.8

// model Redirection {
//   id String @id @default(cuid()) /// @zod.cuid()

//   categoryType   RedirectionCategoryType
//   transitionType RedirectionTransitionType

//   label String // like "Segmentbogen, T-Stück, ..."
//   info  String? // like "Mit 2 Knicken"
//   angle Int?
//   ratio Float?
//   zeta  Float? /// maybe calculate

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   svgIconId String

//   svgIcon  SvgIcon             @relation(fields: [svgIconId], references: [id])
//   category RedirectionCategory @relation(fields: [categoryType], references: [type])

//   /// Determines if the redirection is shown in the seleciont of the corresponding element.
//   /// Defaults to [CHIMNEY, CONNECTOR, AIR_CANAL]
//   usedFor        RedirectionUsage[] @default([CHIMNEY, CONNECTOR, AIR_CANAL])
//   chimneySegment ChimneySegment[]
// }

// // REDIRECTION CATEGORY 
// //------------------------------------------------------

// // Redirection categories are e.g. "T-Stück, Bögen, Segmentbögen, Übergänge, ..."

// model RedirectionCategory {
//   type        RedirectionCategoryType @id
//   label       String
//   info        String?
//   description String?

//   svgIconId String?

//   Redirection Redirection[]

//   svgIcon SvgIcon? @relation(fields: [svgIconId], references: [id])
// }

// // REDIRECTION ENUMS 
// //------------------------------------------------------

// // defines if the redirections are used for chimney, connector and air canal
// // or just for one ore two options

// enum RedirectionUsage {
//   CHIMNEY
//   CONNECTOR
//   AIR_CANAL
// }

// enum RedirectionCategoryType {
//   T_PEICE /// "T-Stück"
//   T_PEICE_CONICAL_90 /// "T-Stück mit konischem Übergang 90°"
//   T_PEICE_CONICAL_60 /// "T-Stück mit konischem Übergang 60°"
//   T_PEICE_CONICAL_30 /// "T-Stück mit konischem Übergang 30°"
//   T_SHOE /// "T-Schuh"
//   SHARP_BEND /// "Knick""
//   ARC_NARROW /// "Eng gekrümmt"
//   ARC_WIDE /// "Weit gekrümmt"
//   ARC_NORMAL /// "Normal gekrümmt"
//   TRANSITION /// "Übergänge"
//   OTHER /// "Sonstiges"
// }

// enum RedirectionTransitionType {
//   ROUNDED /// "Abgerundet"
//   SHARP_EDGED /// "Scharfkantig"
// }

// /////////////////////////////////////////
// // ICON
// /////////////////////////////////////////

// // Icons need to be encoded as base64 or stored as string 

// model SvgIcon {
//   id String @id @default(cuid())

//   iconPath String @db.Xml /// store the actual xml data 
//   mimeType String @default("image/svg+xml") /// defaults to "image/svg+xml"

//   usedInRedirections         Redirection[]
//   usedInChimneyTypeCategorys ChimneyTypeCategory[]
//   usedInMaterialCategories   MaterialCategory[]
//   usedInRedirectionCategoies RedirectionCategory[]
// }

// // Chminey, heating, stove and so on is represented by a single model
// // this single model can be named "heating system", "istallation" or just "system" and
// // each building can have many heating systems that can be linked to appartments
