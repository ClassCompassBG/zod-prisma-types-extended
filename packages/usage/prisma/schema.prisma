// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "prisma-zod-generator"
}

generator zodNew {
  provider = "zod-prisma-types"
  output   = "./zod"
}

enum MyValue {
  A
  B
  C
}

model User {
  id         String   @id @default(cuid()) /// @zod.string({ invalid_type_error: "error" }).cuid()
  name       String? /// some comment @zod.string({ required_error: "error" })
  value      MyValue
  intTwo     Int
  int        Int?
  floatOpt   Float?
  float      Float
  decimal    Decimal
  decimalOpt Decimal?
  bigInt     BigInt
  bigIntOpt  BigInt?
  // json       Json
  // jsonOpt    Json?
  // bytes      Bytes
  // bytesOpt   Bytes?
  // email String @unique
  // name  Float
  // posts Post[]
}

// model User {
//   id      String      @id @default(cuid()) /// @zod.string.cuid()
//   email   String      @unique /// @zod.string.email({ message: "Invalid email address" })
//   /// some other comment 
//   /// @zod.string.min(1).max(100) 
//   name    String?
//   posts   Post[]
//   profile Profile?
//   role    Role[]      @default([USER, ADMIN])
//   enum    AnotherEnum @default(ONE)
// }

// // Role enum is only used as list

// /// @generate.enum.listFilter
// enum Role {
//   USER
//   ADMIN
// }

// // Second enum is only used as scalar

// /// @generate.enum.filter
// enum SecondEnum {
//   ONE
//   TWO
// }

// // Third enum is used as both a list and a scalar

// /// @generate.enum.listFilter @generate.enum.filter
// enum AnotherEnum {
//   ONE
//   TWO
// }

// model Post {
//   id          Int           @id @default(autoincrement())
//   title       String
//   content     String?
//   published   Boolean       @default(false)
//   author      User          @relation(fields: [authorId], references: [id])
//   authorId    String
//   anotherEnum AnotherEnum[]
// }

// model Profile {
//   id     Int        @id @default(autoincrement())
//   bio    String
//   user   User       @relation(fields: [userId], references: [id])
//   userId String     @unique
//   role   Role[]     @default([USER, ADMIN])
//   second SecondEnum @default(ONE)
// }
